/*{
    "CREDIT": "TCHU FBM",
    "DESCRIPTION": "Oil",
    "VSN": "1.0",
    "TAGS": "oil,color",
    "INPUTS": [
        {
            "Label": "Speed",
            "NAME": "speed",
            "TYPE": "float",
            "MIN" : -5.0,
            "MAX" : 5.0,
            "DEFAULT": 1.0
        },
        {
            "Label": "Scale",
            "NAME": "scale",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 4.0
        },
        {
            "Label": "Timeskip",
            "NAME": "timeskip",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": 0.0,
            "MAX": 1000.0
        },
        {
            "LABEL": "Level/Audio Level",
            "NAME": "audio_strength",
            "TYPE": "float",
            "MIN": 1.0,
            "MAX": 3.0,
            "DEFAULT": 2.0
        },
        {
            "Label": "Red",
            "NAME": "redc",
            "TYPE": "float",
            "DEFAULT": 0.3,
            "MIN": 0.0,
            "MAX": 1.0
        },
        {
            "Label": "Green",
            "NAME": "greenc",
            "TYPE": "float",
            "DEFAULT": 0.4,
            "MIN": 0.0,
            "MAX": 1.0
        },
        {
            "Label": "Blue",
            "NAME": "bluec",
            "TYPE": "float",
            "DEFAULT": 0.2,
            "MIN": 0.0,
            "MAX": 1.0
        }
],
    "GENERATORS": [
        {
            "NAME": "animation_time",
            "TYPE": "time_base",
            "PARAMS": {"speed": "speed", "link_speed_to_global_bpm":true}
        }
    ]
}*/

float rand(vec2 n) {
    return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 n) {
    const vec2 d = vec2(0.0, 1.0);
    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = audio_strength;
    for (int i = 0; i < 8; i++) {
        total += (noise(n) * amplitude);
        n += n;
        amplitude *= atan(0.4345);
    }
    return total;
}

vec4 materialColorForPixel(vec2 texCoord) {
    const vec3 c1 = vec3(26.0/255.0, 111.0/255.0, 97.0/255.0);
    const vec3 c2 = vec3(73.0/255.0, 64.0/255.0, 181.4/255.0);
    const vec3 c3 = vec3(0.9, 0., 0.0);
    const vec3 c4 = vec3(64.0/255.0, 1.0/255.0, 114.4/255.0);
    const vec3 c5 = vec3(0.1);
    vec3 c6 = vec3(redc, greenc, bluec);

    vec2 p = vec2(0.5,0.5) + (texCoord-vec2(0.5,0.5)) * scale;

    float q =abs(exp2(fbm(p - (animation_time + timeskip) * 0.08)));
    vec2 r = abs(
        vec2(
            fbm(p + q + (animation_time + timeskip) * 0.125 - p.x - p.y),
            fbm(p + q - (animation_time + timeskip) * 1.0)
        )
    );
    vec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);
    vec4 color = abs(vec4((c )* sqrt(1.), 1.0));
    color.xyz *= 1.;
    color.w = 1.1;
    return color;
}